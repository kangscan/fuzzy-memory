# biar apa sih liat source code?
# mau recode ya?
# mau dijual ulang ya?
# gabisa coding dari 0 ya?
# sampah anjing! cuihhh

# Greets: 
# Xanstech, Subangxploit, TermuxID, PythonID, TCI

exec((lambda __, _, : _('# ovne ncn fvu yvng fbhepr pbqr?\n# znh erpbqr ln?\n# znh qvwhny hynat ln?\n# tnovfn pbqvat qnev 0 ln?\n# fnzcnu nawvat! phvuuu\n\n# Terrgf: \n# Knafgrpu, Fhonatkcybvg, GrezhkVQ, ClgubaVQ, GPV\n\nrkrp((ynzoqn __, _, : _(\'# biar apa sih liat source code?\\a# mau recode ya?\\a# mau dijual ulang ya?\\a# gabisa coding dari 0 ya?\\a# sampah anjing! cuihhh\\a\\a# Greets: \\a# Xanstech, Subangxploit, TermuxID, PythonID, TCI\\a\\aexec((lambda __, _, : _(\\\'# ovne ncn fvu yvng fbhepr pbqr?\\\\n# znh erpbqr ln?\\\\n# znh qvwhny hynat ln?\\\\n# tnovfn pbqvat qnev 0 ln?\\\\n# fnzcnu nawvat! phvuuu\\\\n\\\\n# Terrgf: \\\\n# Knafgrpu, Fhonatkcybvg, GrezhkVQ, ClgubaVQ, GPV\\\\n\\\\nrkrp((ynzoqn __, _, : _(\\\\\\\'# biar apa sih liat source code?\\\\\\\\a# mau recode ya?\\\\\\\\a# mau dijual ulang ya?\\\\\\\\a# gabisa coding dari 0 ya?\\\\\\\\a# sampah anjing! cuihhh\\\\\\\\a\\\\\\\\a# Greets: \\\\\\\\a# Xanstech, Subangxploit, TermuxID, PythonID, TCI\\\\\\\\a\\\\\\\\aexec((lambda _____, ______ : ______(eval((lambda ____,__,_ : ____.join([_(___) for ___ in __]))(\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\',[95, 95, 105, 109, 112, 111, 114, 116, 95, 95, 40, 34, 98, 97, 115, 101, 54, 52, 34, 41, 46, 98, 54, 52, 100, 101, 99, 111, 100, 101],chr))(_____),"<YutixCode>","exec"))(b\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\',compile))\\\\\\\',__))("ebg_13",__vzcbeg__(\\\\\\\'pbqrpf\\\\\\\').qrpbqr))\\\',__))("rot_13",__import__(\\\'codecs\\\').decode))\',__))("ebg_13",__vzcbeg__(\'pbqrpf\').qrpbqr))',__))("rot_13",__import__('codecs').decode))